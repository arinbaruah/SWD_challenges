---
title: "Lifecycle of Steel: From Extraction to Recycling"
author: "Arindom Baruah"
date: "2024-01-25"
categories: [R,data cleaning,exploratory data analysis,high dimensional data visualisation,model metrics, principal decomposition, non-linear decomposition]
quarto-required: ">=1.3.0"
format:
    html:
        output-file: post.html
execute: 
  echo: false
  message: false
  warning: false
number-sections: true
---


```{r}

library(tidyverse)
library(tidymodels)
library(ggplot2)
library(kableExtra)
library(caret)
library(plotROC)
library(mulgar)
library(tourr)
library(GGally)
library(uwot)
library(animation)
library(magick)
library(ggfortify)
library(ggrepel)
library(FunnelPlotR)
library(ggfunnel)
```



```{r theme}

library(tidyverse)
library(stringr)
library(glue)
library(ggrepel)
library(ggplot2)
library(ggtext)
library(showtext)


# caption handles
tt <- str_glue("#SWDchallenge: June 2024 &bull; Source: Synthetic data from ChatGPT<br>")  
li <- str_glue("<span style='font-family:fa6-brands'>&#xf08c;</span>")  
gh <- str_glue("<span style='font-family:fa6-brands'>&#xf09b;</span>")
mn <- str_glue("<span style='font-family:fa6-brands'>&#xf4f6;</span>")


# plot colors
bkg_col      <- colorspace::lighten('#c2cd87', 0.05)    
title_col    <- "#3d3d3d"           
subtitle_col <- "#3d3d3d"     
caption_col  <- "black"   
text_col     <- colorspace::darken("#dbdeef" , 0.2)  

# fonts

font_add('fa6-brands', 'fontawesome/otfs/Font Awesome 6 Brands-Regular-400.otf') 
font_add_google("Oswald", regular.wt = 400, family = "title")                 
font_add_google("Quattrocento Sans", regular.wt = 400, family = "subtitle")  
font_add_google("Quattrocento Sans", regular.wt = 400, family = "text")        
font_add_google("Merriweather", regular.wt = 400,family = "caption")
showtext_auto(enable = TRUE)  

# Caption

caption_text <- str_glue("{tt} {li} Arindam Baruah ; {gh} arinbaruah ; #rstudio #ggfunnel #ggplot2")

theme_set(theme_minimal(base_size = 15, base_family = "text"))                

# Theme updates

theme_update(
  plot.title.position   = "plot",
  plot.caption.position = "plot",
  legend.position       = 'plot',
  plot.margin           = margin(t = 10, r = 15, b = 0, l = 15),
  plot.background       = element_rect(fill = bkg_col, color = bkg_col),
  panel.background      = element_rect(fill = bkg_col, color = bkg_col),
  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1), color = text_col, family = 'text', face = 'bold'),
  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1), color = text_col, family = 'text', face = 'bold'),
  axis.text             = element_text(size = 10, color = text_col, family = 'text',face = "bold"),
  panel.grid.minor.y    = element_blank(),
  panel.grid.major.y    = element_line(linetype = "dotted", linewidth = 0.1, color = 'gray40'),
  panel.grid.minor.x    = element_blank(),
  panel.grid.major.x    = element_blank(),
  axis.line.x           = element_line(color = "#d7d7d8", linewidth = .2),
)

 

```



```{r}
library(ggfunnel)

df_steel <- read_csv("steel_production_recycling.csv")

df_steel <- df_steel %>% mutate(Percent = 100*`Quantity (in tons)`/max(`Quantity (in tons)`))


subtitle <- "A comprehensive breakdown of steel production indicating as high as **<span style='color: darkred;'>40% recycling efficiency</span>**"

pl_funnel <- ggfunnel::funnel(
    data = df_steel,
    tile_specs = list(
    fill = "#24754d",
    colour = "#7C9299",
    alpha = 0.8,
    height = 0.7
  ),
  text_specs = list(
    colour = "#ccdce2",
    size =3
  ),
    values = Percent, levels = Stage
  ) +
  labs(
       y = "Percentage of steel tons ",
       title = "Lifecycle of Steel: From Extraction to Recycling",
       subtitle = subtitle, 
       caption = caption_text) +
       #caption = lcaption) +
  theme(
    plot.title.position   = "plot",
    plot.caption.position = "plot",
    legend.position       = "plot",
    
    plot.margin           = margin(t = 10, r = 15, b = 0, l = 15),       
    plot.background       = element_rect(fill = bkg_col, color = bkg_col),
    panel.background      = element_rect(fill = bkg_col, color = bkg_col),
    
    plot.title            = element_text(
      size                = rel(2),
      family              = "title",
      face                = "bold",
      color               = title_col,
      lineheight          = 1.1,
      margin              = margin(t = 5, b = 5),
      hjust               = 0.5
    ),        
    plot.subtitle         = element_markdown(
      size                = rel(1), 
      family              = 'subtitle',
      color               = subtitle_col,
      lineheight          = 1.4, 
      margin              = margin(t = 5, b = 1)
    ),
    plot.caption          = element_markdown(
      size                = rel(.65), 
      family              = 'caption',
      color               = caption_col,
      lineheight          = 0.6,
      hjust               = 0.5,
      halign              = 0,
      margin              = margin(t = 10, b = 10)
    )
  )
pl_funnel
```




```{r}
library(f1dataR)
lap_data <- load_laps(season = 2015,round = 3)
```



```{r}
library(tidyverse)


pl1 <- ggplot(lap_data,aes(x = driver_id,y = time_sec)) + geom_boxplot() 
pl1
```

```{r}
lap_data %>% filter(lap == max(lap))
```


```{r}
df_circuit <- load_circuit_details(
      season = get_current_season(),
      round = 1,
      log_level = "WARNING"
)
library(tidyverse)

ggplot(df_circuit$corners,aes(x = x,y = y)) + geom_line()
```

```{r}

lap_data <- load_laps(season = 2021,
          round = 10)
final_pos <- lap_data %>% filter(lap == max(lap)) %>% mutate(final_pos = position) %>% select(c(driver_id,final_pos))

lap_data <- inner_join(lap_data,final_pos, by = "driver_id")

lap_data <- lap_data %>% filter(time_sec < 100)

ggplot(lap_data,aes(x = reorder(driver_id,as.integer(final_pos)),y = time_sec)) + geom_boxplot()


```





```{r}
tt_grouped_df <- tt_datasets %>%
  group_by(year, week) %>%
  mutate(
    obs_num = cut(
      observations,
      breaks = c(0, 200, 2000, 20000, 3771792),
      include.lowest = TRUE,
      right = FALSE,
      labels = c("< 200", "200 to 1999", "2k to 19999", "> 20k")
    ),
    var_num = cut(
      variables,
      breaks = c(0, 5, 10, 15, 130),
      include.lowest = TRUE,
      right = FALSE,
      labels = c("< 5", "5 to 9", "10 to 14", "â‰¥ 15")
    )
  )

tt_grouped_df <- tt_datasets %>% group_by(year,week) %>% mutate(variable_category = case_when(variables <= 6 ~ "Low dimensions (0-6)",
                                                                              variables > 6 & variables <=15 ~ "Medium dimensions (7-15)",
                                                                              variables > 15  ~ "High dimensions (> 15)"))

# obs_df <- tt_grouped_df |>
#   group_by(year) |>
#   count(obs_num)


variable_df <- tt_grouped_df |>
  group_by(year) |> count(variable_category)
```

```{r theme}

library(tidyverse)
library(stringr)
library(glue)
library(ggrepel)
library(ggplot2)
library(ggtext)
library(sysfonts)
library(showtext)


# caption handles
tt <- str_glue("#SWDchallenge: June 2024 &bull; Source: Synthetic data from ChatGPT<br>")  
li <- str_glue("<span style='font-family:fa6-brands'>&#xf08c;</span>")  
gh <- str_glue("<span style='font-family:fa6-brands'>&#xf09b;</span>")
mn <- str_glue("<span style='font-family:fa6-brands'>&#xf4f6;</span>")


# plot colors
bkg_col      <- colorspace::lighten('#EAE3DC', 0.05)    
title_col    <- "#3d3d3d"           
subtitle_col <- "#3d3d3d"     
caption_col  <- "black"   
text_col     <- colorspace::darken("gray40" , 0.2)  

# fonts

font_add('fa6-brands','fontawesome/otfs/Font Awesome 6 Brands-Regular-400.otf') 
font_add_google("Oswald", regular.wt = 400, family = "title")                 
font_add_google("Quattrocento Sans", regular.wt = 400, family = "subtitle")  
font_add_google("Quattrocento Sans", regular.wt = 400, family = "text")        
font_add_google("Merriweather", regular.wt = 400,family = "caption")
showtext_auto(enable = TRUE)  

# Plot texts

title_text <- "Number of observations"

X_icon <- glue("<span style='font-family:fa6-brands'>&#xe61b;</span>")

caption_text <- str_glue("{tt} ; {li} Arindam Baruah ; {gh} arinbaruah ; #rstudio #gg_waffle #ggplot2")

theme_set(theme_minimal(base_size = 15, base_family = "text"))                

# Theme updates

theme_update(
  plot.title.position   = "plot",
  plot.caption.position = "plot",
  legend.position       = 'plot',
  plot.margin           = margin(t = 10, r = 15, b = 0, l = 15),
  plot.background       = element_rect(fill = bkg_col, color = bkg_col),
  panel.background      = element_rect(fill = bkg_col, color = bkg_col),
  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1), color = text_col, family = 'text', face = 'bold'),
  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1), color = text_col, family = 'text', face = 'bold'),
  axis.text             = element_text(size = 10, color = text_col, family = 'text',face = "bold"),
  panel.grid.minor.y    = element_blank(),
  panel.grid.major.y    = element_line(linetype = "dotted", linewidth = 0.1, color = 'gray40'),
  panel.grid.minor.x    = element_blank(),
  panel.grid.major.x    = element_blank(),
  axis.line.x           = element_line(color = "#d7d7d8", linewidth = .2),
)

 

```



```{r}

waffle_box <- c("#006e89", "#ff6037", "#e6bc00", "#3a9234")

dim_order <- c("Low dimensions (0-6)", "Medium dimensions (7-15)", "High dimensions (> 15)")

variable_df$variable_category <- factor(variable_df$variable_category, levels = dim_order)

variable_waffle <- ggplot(data = variable_df,aes(fill = variable_category, values = n)) +
  geom_waffle(color = text_color, size = .15, flip = TRUE) +
  facet_wrap(~year, nrow = 1, strip.position = "bottom") +
  scale_x_discrete() +
  scale_y_continuous(
   labels = function(x) x * 10,   # 10 observations per row
    expand = c(0, 0)
  ) +
  scale_fill_manual(values = waffle_box) +
  labs(
  title = "Distribution of dimensions in TidyTuesdayR repository",
  fill = "Number of dimensions",
   y = "Number of datasets",
  subtitle = subtitle,
  caption = caption_text) + 
  
  theme(legend.position = "top",
    legend.title.position = "top",
    legend.title = element_text(
      color = text_col,
      hjust = 0.5,
      family = "text",
      face = "bold",
      size = 14.5,
    ),
    legend.text = element_text(
      color = text_col,
      family = "text",
      size = 10
    ),
)

variable_waffle

```


